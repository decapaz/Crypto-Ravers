{"version":3,"sources":["Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","candy-machine.ts"],"names":["ConnectButton","styled","WalletDialogButton","CounterText","span","MintContainer","div","MintButton","Button","DisconnectButton","WalletDisconnectButton","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","open","message","severity","undefined","alertState","setAlertState","Date","startDate","setStartDate","wallet","useAnchorWallet","candyMachine","setCandyMachine","refreshCandyMachineState","a","getCandyMachineState","candyMachineId","connection","goLiveDate","onMint","program","mintOneToken","config","publicKey","treasury","mintTxId","awaitTransactionSignatureConfirmation","txTimeout","status","err","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","useEffect","shortenAddress","toBase58","toLocaleString","disabled","onClick","variant","CircularProgress","date","onMount","onComplete","renderer","disconnect","Snackbar","autoHideDuration","onClose","Alert","anchor","PublicKey","process","network","Connection","startDateSeed","parseInt","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","getCoin98Wallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","CANDY_MACHINE_PROGRAM","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","txid","timeout","commitment","queryStatus","done","slot","confirmations","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","anchorWallet","provider","preflightCommitment","fetchIdl","idl","id","account","fetch","state","toNumber","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","Keypair","generate","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","address","chars","slice","ms"],"mappings":"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","file":"static/js/main.3cc9896a.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar,} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton, WalletDisconnectButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"./candy-machine\";\nimport { disconnect } from \"process\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div`margin-top:10px;`; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\nconst DisconnectButton = styled(WalletDisconnectButton)``;\n\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      if (!wallet) return;\n\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        itemsRedeemed,\n      } = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      setItemsRedeemed(itemsRedeemed);\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  };\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n        const mintTxId = await mintOneToken(\n          candyMachine,\n          props.config,\n          wallet.publicKey,\n          props.treasury\n        );\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n      refreshCandyMachineState();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(refreshCandyMachineState, [\n    wallet,\n    props.candyMachineId,\n    props.connection,\n  ]);\n\n  return (\n    <main>\n      {wallet && (\n        <p>Wallet {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\n      )}\n\n      {wallet && <p>Your SOL Balance: {(balance || 0).toLocaleString()} SOL</p>}\n\n      {wallet && <p>Total Crypto Ravers Available: {itemsAvailable}</p>}\n\n      {wallet && <p>Redeemed: {itemsRedeemed}</p>}\n\n      {wallet && <p>Remaining Crypto Ravers for minting: {itemsRemaining}</p>}\n\n      <MintContainer>\n        {!wallet ? (\n          <ConnectButton>CONNECT WALLET</ConnectButton>\n        ) : (\n          <MintButton\n            disabled={isSoldOut || isMinting || !isActive}\n            onClick={onMint}\n            variant=\"contained\"\n          >\n            {isSoldOut ? (\n              \"SOLD OUT\"\n            ) : isActive ? (\n              isMinting ? (\n                <CircularProgress />\n              ) : (\n                \"MINT NOW\"\n              )\n            ) : (\n              <Countdown\n                date={startDate}\n                onMount={({ completed }) => completed && setIsActive(true)}\n                onComplete={() => setIsActive(true)}\n                renderer={renderCounter}\n              />\n            ) \n            }\n          </MintButton>\n          ) \n         }         \n      </MintContainer>\n      <DisconnectButton onClick={disconnect} disabled={!wallet}>LOG OUT</DisconnectButton>\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n  getCoin98Wallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst treasury = new anchor.web3.PublicKey(\n  process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst config = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\n);\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network }),\n        getCoin98Wallet(),\n    ],\n    []\n  );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletDialogProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                config={config}\n                connection={connection}\n                startDate={startDateSeed}\n                treasury={treasury}\n                txTimeout={txTimeout}\n              />\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection;\n  program: anchor.Program;\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  goLiveDate: Date,\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  );\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n\n  console.log({\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  })\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  };\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const { connection, program } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  );\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  });\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}"],"sourceRoot":""}